apply from: 'kafka.gradle'

buildscript {
    ext {
        springBootVersion = '2.2.7.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:3.0.1'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE'
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'jacoco'

group = 'com.raksit.example'
version = '0.0.1'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

ext['kafka.version'] = '2.4.0'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-config:1.1.3.RELEASE'
    implementation('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.2.7.RELEASE') {
        exclude group: 'org.codehaus.jackson'
    }
    implementation 'com.auth0:java-jwt:3.10.3'
    implementation 'io.springfox:springfox-swagger2:2.10.0'
    implementation 'io.springfox:springfox-swagger-ui:2.10.5'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.projectlombok:lombok:1.18.12'
    runtime 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation 'com.github.javafaker:javafaker:0.16'
    testImplementation 'io.rest-assured:rest-assured:3.1.0'
    testImplementation 'io.zonky.test:embedded-database-spring-test:1.5.4'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
}

testSets {
    integrationTest {
        dirName = 'integration-test'
    }
}

test {
    testLogging.showStandardStreams = false
    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed'
    }
    reports {
        html.enabled = true
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    finalizedBy jacocoTestReport
}

integrationTest {
    testLogging.showStandardStreams = false
    useJUnitPlatform()

    testLogging {
        events 'passed', 'skipped', 'failed'
    }
    reports {
        html.enabled = true
    }
}

bootRun {
    if (System.properties.containsKey('spring.profiles.active')) {
        systemProperty 'spring.profiles.active', System.properties['spring.profiles.active']
    } else {
        systemProperty 'spring.profiles.active', 'local'
    }
}

checkstyle {
    toolVersion = "8.33"
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    maxErrors = 0
    maxWarnings = 0
    reportsDir = file("$project.buildDir/reports/checkstyle")
}

pmd {
    toolVersion = "6.21.0"
    ignoreFailures = false
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = ["java-basic", "java-braces"]
}

jacoco {
    toolVersion = '0.8.2'
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled = true
        csv.enabled = false
        html.destination file("$buildDir/reports/jacoco")
    }
}

check.dependsOn(integrationTest)
test.shouldRunAfter(pmdMain)
integrationTest.shouldRunAfter(test)
jacocoTestReport.dependsOn(test)


